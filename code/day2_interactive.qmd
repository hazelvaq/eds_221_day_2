---
title: "Day 2 Interactive Lesson"
format: html
editor: visual
execute: 
  echo: true
  warning: false
---

## Making & indexing data in R 

### Vectors

```{r}
dogs <- c("teddy","khora","waffle","banjo","tallie")

#Check the class of dogs
typeof(dogs)
class(dogs)
```

```{r}
my_breakfast <- c("waffles",2,TRUE,"coffee")
typeof(my_breakfast)
```

```{r}
weights <- c(50,60,25,35,55)
typeof(weights)
class(weights)
```

Integer

```{r}
weights_integer <- c(50L, 60L, 25L, 35L, 55L)
typeof(weights_integer)
class(weights_integer)
```

is. function asks a question and then returns TRUE or FALSE

```{r}
is.numeric(weights_integer)
```

Change a class of a variable

```{r}
zipcodes <- c(93105,11220,10009,93101)

#Change from integers to string
#We can use as.__ to reclassify a function

class(zipcodes)

zipcodes_chr <- as.character(zipcodes)
zipcodes_chr
```

## Created a vector with named elements

```{r}
dog_food <- c(teddy = "purina", khora = "alpo", waffle = "fancy feast", banjo = "blue diamond", tallie = "farmer's dog")

dog_food

## The class comes back as what the value is set to here we set it to numbers
test <- c(cat = 4, dog = 10, elephant = 11)
test
class(test)
```

How to return positions of values in vectors

```{r}
# Use brackets [index]
# Values start from 1 and then increase
dog_food[2]

dog_food["teddy"]
```

Access ranges of values in a vector

Use: to refer to a range (low : high)

```{r}
trees <- c("ponderosa","lodgepole", "jeffrey", "sugar","white","bristlecone")

trees[3]

trees[3:5]
```

## Warm up for loops

```{r}
i <- 4
trees[i]
```

Sequence

```{r}
i <- seq(1:3)
trees[i]

yoda <- 4
trees[yoda]
```

```{r}
#Reassign a value in trees  
trees[3] <- "OAK"
trees
```

## How to add branches

Branches: creates an additional side channel so you are not pushing and puling from the main channel it creates an intermediate area to work

Git commit: to our local branch is what we usually do

So instead of pushing straight to the main branch we will push to a remote branch and that can be merged in with remote main. By using a pull request. We can delete our remote branches once we push to our remote main. Safety check to mess around, test it there in case it breaks.

```{r}
#Through Rstudio
# In the terminal do git branch 
# Then click the purple branch in the git Tab and then name branch and make sure it is synched to the remote repo
# 
# git branch to get into the new-branch-1
# to exit git checkout name-of-branch
# Then you can make edits the updated document is saved on your computer
#But it will get tracked in our branch 1
#Then you can git commit and git push and will get a notification on git that there is a new branch you can commit 
#Come back to R and then get out of new branch by git checkout main
#Then delete git branch -d new-branch-1
#then pull and then commit push
```

## Matrix Indexing

```{r}
fish_size <- matrix(c(0.8,1.2,0.4,0.9), ncol = 2, byrow = FALSE)

fish_size
# Structure 
str(fish_size)
#Tells me the difference values data type
typeof(fish_size)

#Index matrix r,c
fish_size[1,1]
# Index a row or column
fish_size[,1]
```

an edit
